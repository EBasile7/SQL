# Spotify Analytics

# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL.

# Examine data to see what it includes
SELECT *
FROM BIT_DB.Spotifydata
LIMIT 5;

# What are the Top 10 Songs based on popularity?
SELECT track_name
,artist_name
,popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10
;

# What is the average danceability for the Top 10 Songs?
SELECT Track_name
, artist_name
, popularity
, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY popularity
ORDER BY popularity DESC
LIMIT 10
;

# Who are the TOP 10 most popular artists?
SELECT DISTINCT artist_name
, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10
;

# What is the average popularity, danceability, tempo, energy, and duration by artist and track?
SELECT artist_name
, track_name
, AVG(popularity)
, AVG(danceability)
, AVG(tempo)
, AVG(energy)
, AVG(duration_ms)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name
ORDER BY AVG(popularity) DESC
;

# Which artist recorded the loudest song and how popular was it?
SELECT artist_name
, track_name
, MAX(loudness)
, popularity
FROM BIT_DB.Spotifydata
;

# Which artist recorded the longest song and how popular was it?
SELECT artist_name
, track_name
, MAX(duration_ms)
, popularity
FROM BIT_DB.Spotifydata
;

# Which artist recorded the shortest song and how popular was it?
SELECT artist_name
, track_name
, MIN(duration_ms)
, popularity
FROM BIT_DB.Spotifydata
;

# Which Songs have the highest danceabilty, how popular were they, and what was the energy level?
SELECT track_name
,artist_name
, danceability
, energy
, popularity
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY danceability DESC
;

# Calculate the average popularity for the artists in the Spotify data table. 
# Then, for every artist with an average popularity of 90 or above,
# show their name, their average popularity, and label them as a “Top Star”.

--Used a CTE to calculate the average popularity for every artist
WITH average_popularity_CTE AS (
SELECT Spotifydata.artist_name,
AVG(Spotifydata.popularity) AS average_popularity
FROM SpotifyData 
GROUP BY Spotifydata.artist_name
)
 
SELECT  artist_name
, average_popularity
,'Top Star' AS top_star
FROM average_popularity_CTE
WHERE average_popularity>=90
;
